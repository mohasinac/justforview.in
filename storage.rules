rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Product images - read for all, write for authenticated users and admins
    match /products/{allPaths=**} {
      allow read: if true; // Anyone can read product images
      allow write: if request.auth != null && 
                      (isAdmin() || isValidImageUpload()) &&
                      request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    // User profile images - users can upload their own profile images
    match /users/{userId}/profile/{allPaths=**} {
      allow read: if true; // Profile images are public
      allow write: if request.auth != null && 
                      request.auth.uid == userId &&
                      isValidImageUpload() &&
                      request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    // Auction images - authenticated users can upload auction images
    match /auctions/{auctionId}/{allPaths=**} {
      allow read: if true; // Anyone can read auction images
      allow write: if request.auth != null && 
                      isValidImageUpload() &&
                      request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    // Order documents/receipts - only order owner and admins can access
    match /orders/{orderId}/{allPaths=**} {
      allow read: if request.auth != null && 
                     (isOrderOwner(orderId) || isAdmin());
      allow write: if request.auth != null && 
                      (isOrderOwner(orderId) || isAdmin()) &&
                      isValidDocumentUpload() &&
                      request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    // Return/refund documents - only return requester and admins can access
    match /returns/{returnId}/{allPaths=**} {
      allow read: if request.auth != null && 
                     (isReturnOwner(returnId) || isAdmin());
      allow write: if request.auth != null && 
                      (isReturnOwner(returnId) || isAdmin()) &&
                      isValidDocumentUpload() &&
                      request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    // Category images - only admins can manage
    match /categories/{allPaths=**} {
      allow read: if true; // Anyone can read category images
      allow write: if request.auth != null && 
                      isAdmin() &&
                      isValidImageUpload() &&
                      request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    // Temporary uploads - authenticated users can upload temporarily
    match /temp/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && 
                            request.auth.uid == userId &&
                            request.resource.size < 10 * 1024 * 1024; // 10MB limit
      // Note: Implement cleanup cloud function to remove temp files after 24 hours
    }
    
    // Helper functions
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.role == 'admin';
    }
    
    function isValidImageUpload() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.contentType in ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];
    }
    
    function isValidDocumentUpload() {
      return request.resource.contentType in [
        'image/jpeg', 'image/png', 'image/webp',
        'application/pdf',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
      ];
    }
    
    function isOrderOwner(orderId) {
      // This would require a Firestore read to check order ownership
      // For better performance, consider passing userId in the path or using custom claims
      return request.auth != null;
    }
    
    function isReturnOwner(returnId) {
      // This would require a Firestore read to check return ownership
      // For better performance, consider passing userId in the path or using custom claims
      return request.auth != null;
    }
  }
}
