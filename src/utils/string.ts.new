/**
 * String Utilities
 * 
 * DEPRECATED: Most functions have been moved to @/lib/utils
 * This file now re-exports from the main utils file for backwards compatibility.
 * 
 * Please update your imports to use @/lib/utils directly:
 * 
 * Before: import { capitalize } from '@/utils/string';
 * After:  import { capitalize } from '@/lib/utils';
 */

// Re-export common functions from main utils
export {
  capitalize,
  truncate,
  slugify,
  generateId,
  titleCase,
} from '@/lib/utils';

// String-specific utilities (not in main utils)

/**
 * Convert camelCase to kebab-case
 */
export const camelToKebab = (str: string): string => {
  return str.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase();
};

/**
 * Convert kebab-case to camelCase
 */
export const kebabToCamel = (str: string): string => {
  return str.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
};

/**
 * Strip HTML tags from string
 */
export const stripHtml = (html: string): string => {
  return html.replace(/<[^>]*>/g, "");
};

/**
 * Simple email validation (use validation.ts for forms)
 * @deprecated Use validateEmail from @/utils/validation for forms
 */
export const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

/**
 * Simple phone validation
 * @deprecated Use validatePhone from @/utils/validation for forms
 */
export const isValidPhone = (phone: string): boolean => {
  const phoneRegex = /^\+?[\d\s\-\(\)]+$/;
  return phoneRegex.test(phone) && phone.replace(/\D/g, "").length >= 10;
};
