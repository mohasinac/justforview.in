rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Products collection - read for all, write for admins only
    match /products/{productId} {
      allow read: if true; // Anyone can read products
      allow write: if request.auth != null && 
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Product reviews subcollection
      match /reviews/{reviewId} {
        allow read: if true; // Anyone can read reviews
        allow create: if request.auth != null && 
                         request.auth.uid == resource.data.userId &&
                         validateReview();
        allow update: if request.auth != null && 
                         request.auth.uid == resource.data.userId;
        allow delete: if request.auth != null && 
                         (request.auth.uid == resource.data.userId || 
                          isAdmin());
      }
    }
    
    // Categories collection - read for all, write for admins only
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin();
      
      // Validate category data on write
      allow create: if request.auth != null && isAdmin() && validateCategory();
      allow update: if request.auth != null && isAdmin() && validateCategory();
    }
    
    // Orders collection - users can read their own orders, admins can read all
    match /orders/{orderId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.userId &&
                       validateOrder();
      allow update: if request.auth != null && 
                       (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Auctions collection
    match /auctions/{auctionId} {
      allow read: if true; // Anyone can read auctions
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.sellerId &&
                       validateAuction();
      allow update: if request.auth != null && 
                       (request.auth.uid == resource.data.sellerId || isAdmin());
      allow delete: if request.auth != null && 
                       (request.auth.uid == resource.data.sellerId || isAdmin());
      
      // Auction bids subcollection
      match /bids/{bidId} {
        allow read: if true; // Anyone can read bids
        allow create: if request.auth != null && 
                         request.auth.uid == request.resource.data.bidderId &&
                         validateBid();
        allow update: if false; // Bids cannot be updated
        allow delete: if false; // Bids cannot be deleted
      }
    }
    
    // Cart collection - users can only access their own cart
    match /carts/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Cart items subcollection
      match /items/{itemId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Watchlist collection - users can only access their own watchlist
    match /watchlists/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Watchlist items subcollection
      match /items/{itemId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // User addresses collection
    match /users/{userId}/addresses/{addressId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Contact messages - anyone can create, only admins can read
    match /contacts/{contactId} {
      allow create: if validateContact();
      allow read: if request.auth != null && isAdmin();
      allow update: if request.auth != null && isAdmin();
    }
    
    // Returns/Refunds collection
    match /returns/{returnId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.userId &&
                       validateReturn();
      allow update: if request.auth != null && isAdmin();
    }
    
    // Admin logs collection - only admins can access
    match /admin_logs/{logId} {
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Seller Products collection - sellers can manage their own products
    match /seller_products/{productId} {
      allow read: if true; // Anyone can read products
      allow create: if request.auth != null && 
                       isSeller() &&
                       request.resource.data.sellerId == request.auth.uid &&
                       validateSellerProduct();
      allow update: if request.auth != null && 
                       (resource.data.sellerId == request.auth.uid || isAdmin());
      allow delete: if request.auth != null && 
                       (resource.data.sellerId == request.auth.uid || isAdmin());
    }
    
    // Seller Coupons collection - sellers can manage their own coupons
    match /seller_coupons/{couponId} {
      allow read: if request.auth != null && 
                     (resource.data.sellerId == request.auth.uid || isAdmin());
      allow create: if request.auth != null && 
                       isSeller() &&
                       request.resource.data.sellerId == request.auth.uid &&
                       validateCoupon();
      allow update: if request.auth != null && 
                       (resource.data.sellerId == request.auth.uid || isAdmin());
      allow delete: if request.auth != null && 
                       (resource.data.sellerId == request.auth.uid || isAdmin());
    }
    
    // Seller Sales collection - sellers can manage their own sales
    match /seller_sales/{saleId} {
      allow read: if request.auth != null && 
                     (resource.data.sellerId == request.auth.uid || isAdmin());
      allow create: if request.auth != null && 
                       isSeller() &&
                       request.resource.data.sellerId == request.auth.uid &&
                       validateSale();
      allow update: if request.auth != null && 
                       (resource.data.sellerId == request.auth.uid || isAdmin());
      allow delete: if request.auth != null && 
                       (resource.data.sellerId == request.auth.uid || isAdmin());
    }
    
    // Seller Shops collection - sellers can manage their own shops
    match /sellers/{sellerId} {
      allow read: if true; // Anyone can read shop info
      allow write: if request.auth != null && 
                      (request.auth.uid == sellerId || isAdmin());
    }
    
    // Helper functions
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isSeller() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'seller' ||
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    function validateReview() {
      let data = request.resource.data;
      return data.keys().hasAll(['rating', 'comment', 'userId', 'productId']) &&
             data.rating is int &&
             data.rating >= 1 &&
             data.rating <= 5 &&
             data.comment is string &&
             data.comment.size() <= 1000;
    }
    
    function validateOrder() {
      let data = request.resource.data;
      return data.keys().hasAll(['userId', 'items', 'total', 'status']) &&
             data.items is list &&
             data.items.size() > 0 &&
             data.total is number &&
             data.total > 0 &&
             data.status in ['pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled'];
    }
    
    function validateAuction() {
      let data = request.resource.data;
      return data.keys().hasAll(['title', 'description', 'startingBid', 'endTime', 'sellerId']) &&
             data.title is string &&
             data.title.size() <= 200 &&
             data.description is string &&
             data.description.size() <= 2000 &&
             data.startingBid is number &&
             data.startingBid > 0 &&
             data.endTime is timestamp &&
             data.endTime > request.time;
    }
    
    function validateBid() {
      let data = request.resource.data;
      let auction = get(/databases/$(database)/documents/auctions/$(data.auctionId));
      return data.keys().hasAll(['amount', 'bidderId', 'auctionId']) &&
             data.amount is number &&
             data.amount > auction.data.currentBid &&
             data.amount >= auction.data.minimumBid &&
             auction.data.status == 'live' &&
             auction.data.endTime > request.time;
    }
    
    function validateContact() {
      let data = request.resource.data;
      return data.keys().hasAll(['name', 'email', 'subject', 'message']) &&
             data.name is string &&
             data.name.size() <= 100 &&
             data.email is string &&
             data.email.matches('.*@.*\\..*') &&
             data.subject is string &&
             data.subject.size() <= 200 &&
             data.message is string &&
             data.message.size() <= 2000;
    }
    
    function validateReturn() {
      let data = request.resource.data;
      return data.keys().hasAll(['orderId', 'reason', 'userId']) &&
             data.reason is string &&
             data.reason.size() <= 1000;
    }
    
    function validateCategory() {
      let data = request.resource.data;
      return data.keys().hasAll(['name', 'slug', 'isActive', 'level']) &&
             data.name is string &&
             data.name.size() > 0 &&
             data.name.size() <= 100 &&
             data.slug is string &&
             data.slug.size() > 0 &&
             data.slug.size() <= 100 &&
             data.slug.matches('^[a-z0-9-]+$') &&
             data.isActive is bool &&
             data.level is int &&
             data.level >= 0 &&
             data.level <= 10 &&
             (data.sortOrder is int || !data.keys().hasAny(['sortOrder'])) &&
             (data.description is string || !data.keys().hasAny(['description']));
    }
    
    function validateSellerProduct() {
      let data = request.resource.data;
      return data.keys().hasAll(['name', 'sellerId', 'categoryId', 'pricing', 'inventory', 'seo']) &&
             data.name is string &&
             data.name.size() > 0 &&
             data.name.size() <= 200 &&
             data.pricing.price is number &&
             data.pricing.price > 0 &&
             data.inventory.quantity is int &&
             data.inventory.quantity >= 0 &&
             data.seo.slug is string &&
             data.seo.slug.size() > 0 &&
             data.seo.slug.matches('^buy-[a-z0-9-]+$');
    }
    
    function validateCoupon() {
      let data = request.resource.data;
      return data.keys().hasAll(['code', 'name', 'sellerId', 'type', 'value']) &&
             data.code is string &&
             data.code.size() > 0 &&
             data.code.size() <= 50 &&
             data.name is string &&
             data.name.size() > 0 &&
             data.type in ['percentage', 'fixed', 'free_shipping', 'bogo', 'cart_discount'] &&
             data.value is number &&
             data.value > 0;
    }
    
    function validateSale() {
      let data = request.resource.data;
      return data.keys().hasAll(['name', 'sellerId', 'discountType', 'discountValue', 'applyTo']) &&
             data.name is string &&
             data.name.size() > 0 &&
             data.discountType in ['percentage', 'fixed'] &&
             data.discountValue is number &&
             data.discountValue > 0 &&
             data.applyTo in ['all', 'specific_products', 'specific_categories'];
    }
  }
}
